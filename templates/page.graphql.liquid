{{ 'style.graphql-plp.css' | asset_url | stylesheet_tag }}
<div class = 'graphql-plp'>
    <div class = 'graphql-plp__product'>
        <div class = 'product__img'>
            <img src = '{{ 'performance-tee.png' | asset_img_url: 'master' }}' class="img">
        </div>
        <h4>Performance tee</h4>
        <p>$10.0</p>
    </div>
</div>
<script>
    class Plp {
        #apiAccessToken;
        #graphqlUrl;
        #cart;
        constructor(){
            this.#apiAccessToken = API_ACCESS_TOKEN;
            this.#graphqlUrl = GRAPHQL_URL;
        }
        formatter = new Intl.NumberFormat('en-US',{
            style: 'currency',
            currency: "USD",
            maximumFractionDigits: 2
        })

        async fetchAPI(body) {
            const response = await fetch(this.#graphqlUrl, body);
            return await response.json();
        }

        toggleCart() {
            const sideCart = document.querySelector('.side-cart');
            const sideCartModal = document.querySelector('.side-cart-modal');
            sideCart.classList.toggle('open');
            sideCartModal.classList.toggle('side-cart-modal--open')
            document.body.setAttribute('style', 'overflow: hidden');
        }

        getAllProductsQuery() {
            return (`
            query {
                products(first: 10){
                    edges{
                        node{
                            id,
                            title,
                            handle,
                            tags,
                            images(first: 1){
                                edges{
                                    node{
                                        altText,
                                        url,
                                    }
                                }
                            },
                            priceRange{
                                minVariantPrice{
                                    amount,
                                    currencyCode
                                }
                            },
                            variants(first: 10){
                                edges{
                                    node{
                                        title,
                                        id
                                    }
                                }
                            }
                        }
                    } 
                }
            }
            `)
        }

        createCartQuery(){
            return (
                `
                mutation {
                    cartCreate{
                      cart{
                        id,
                        checkoutUrl,
                      }
                    }
                  }
                `
            )
        }

        addToCartQuery(quantity, id){
            return(`
                mutation{
                    cartLinesAdd(
                        lines:[{quantity: ${quantity}, merchandiseId: "${id}"}],
                        cartId: "${this.#cart.id}"
                    ){
                        cart{
                            id,
                            createdAt,
                            totalQuantity,
                            cost{
                                subtotalAmount{
                                  amount,
                                  currencyCode,
                                }
                            },
                          lines(first: 10){
                            edges{
                              node{
                                id,
                                quantity,
                                cost{
                                  totalAmount{
                                    amount,
                                    currencyCode
                                  }
                                },
                                merchandise{
                                  ... on ProductVariant{
                                    image{
                                      altText,
                                      url,
                                    },
                                    id,
                                    title,
                                    product{
                                        title
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                    }
                }
            `)
        }

        updateCartQuery(quantity, merchandiseId, cartLineId){
            return(
                `
                mutation{
                    cartLinesUpdate(
                        lines:[{
                            quantity: ${quantity}, merchandiseId: "${merchandiseId}",
                            id:"${cartLineId}",
                        }],
                        cartId: "${this.#cart.id}"
                      ){
                        cart{
                            id,
                            createdAt,
                            totalQuantity,
                            cost{
                                subtotalAmount{
                                  amount,
                                  currencyCode,
                                }
                            },
                          lines(first: 10){
                            edges{
                              node{
                                id,
                                quantity,
                                cost{
                                  totalAmount{
                                    amount,
                                    currencyCode
                                  }
                                },
                                merchandise{
                                  ... on ProductVariant{
                                    image{
                                      altText,
                                      url,
                                    },
                                    id,
                                    title,
                                    product{
                                      title,
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                    }
                }
                `
            )
        }

        graphqlBody(query) {
            return {
                'async': true,
                'crossDomain': true,
                'method': 'POST',
                'credentials': 'include',
                'headers':{
                    'X-Shopify-Storefront-Access-Token': this.#apiAccessToken,
                    'Content-Type': 'application/graphql',
                },
                'body': query
            }
        }

        renderCartItems(cartDetails) {
            console.log(cartDetails)
            const cartLines = cartDetails.lines.edges;
            const cartItemsWrapper = document.querySelector(".side-cart__items");
            cartItemsWrapper.innerHTML = "";
    
            for (let item of cartLines) {
                const template = `
                    <div class="side-cart__item">
                        <div class="item__image-wrapper">
                            <img class="item__image" src="${ item.node.merchandise.image.url }" alt="${ item.node.merchandise.image.altText }" />
                        </div>
                        <div class="item__details item__details--one">
                            <p class="item__heading title">${item.node.merchandise.product.title}</p>
                            <p class="p--secondary">${item.node.merchandise.title ? item.node.merchandise.title: '' }</p>
                            <div class="item__amount-container">
                                <img src="https://cdn.shopify.com/s/files/1/0611/1834/9495/files/icon-minus.svg?v=1664184954" class="item-amount__decrease" />
                                <p class="p--secondary item__amount" data-itemQuantity="${item.node.quantity}">${item.node.quantity}</p>
                                <img src="https://cdn.shopify.com/s/files/1/0611/1834/9495/files/icon-plus.svg?v=1664184966" class="item-amount__increase" />
                            </div>
                        </div>
                        <div class="item__details item__details--two">
                            <p class="p--secondary">${this.formatter.format(item.node.cost.totalAmount.amount)}</p>
                            <div class="item__cancel-container" data-itemID = "${item.node.id}" data-itemVariantID = "${item.node.merchandise.id}">
                                <img src="https://cdn.shopify.com/s/files/1/0611/1834/9495/files/icon-cancel.svg?v=1664184918" />
                            </div>
                        </div>
                    </div>
                `
    
                cartItemsWrapper.insertAdjacentHTML('beforeend', template);
            }
            const cartItems = cartItemsWrapper.children;
            for(let i = 0; i<cartItems.length; i++){
                cartItems[i].addEventListener('click',async (e)=>{
                    const variantId = cartItems[i].querySelector('.item__cancel-container').dataset.itemvariantid;
                    const cartLineId = cartItems[i].querySelector('.item__cancel-container').dataset.itemid;
                    const currQuantity = cartItems[i].querySelector('.item__amount').dataset.itemquantity;
                    console.log(variantId, cartLineId, currQuantity);
                    if(e.target.classList.contains('item-amount__increase')){
                        await this.incrementItemQuantity(currQuantity,variantId,cartLineId);
                    }else if(e.target.classList.contains('item-amount__decrease')){
                        await this.decrementItemQuantity(currQuantity,variantId,cartLineId);
                    }
                })
            }
            const sideCartTotalPrice = document.querySelector(".side-cart__total-price");
            sideCartTotalPrice.textContent = this.formatter.format(cartDetails.cost.subtotalAmount.amount);
        }

        renderPlpItems(plpProducts){
            const plpWrapper = document.querySelector(".graphql-plp");
            plpWrapper.innerHTML = "";

            for(let item of plpProducts){
                const template = `
                    <div class = 'graphql-plp__product'>
                        <div class = 'product__img' data-variant-id="${item.node.variants.edges[0].node.id}">
                            <img src='${item.node.images.edges[0].node.url}' alt='${item.node.images.edges[0].node.altText}' class="img">
                        </div>
                        <h4>${item.node.title}</h4>
                        <p>${this.formatter.format(Number(item.node.priceRange.minVariantPrice.amount))}</p>
                        <button class = "product__add-to-cart">Add to Card</button>
                    </div>
                `;
                plpWrapper.insertAdjacentHTML('beforeend', template);
            }       
        }

        async getAllProducts() {
            let plpProducts = await this.fetchAPI(this.graphqlBody(this.getAllProductsQuery()));
            this.renderPlpItems(plpProducts.data.products.edges);
            const allProductIds = document.querySelectorAll('.product__add-to-cart');
            for(let i = 0; i< allProductIds.length; i++){
                allProductIds[i].addEventListener('click',(e)=>{
                    const variantId = allProductIds[i].parentElement.querySelector(".product__img").dataset.variantId;
                    this.addToCart(variantId)
                })
            }
        }
        async addToCart(variantId) {
            console.log(variantId)
            let cartDetails = await this.fetchAPI(this.graphqlBody(this.addToCartQuery(1,variantId)));
            console.log(cartDetails)
            this.#cart = cartDetails.data.cartLinesAdd.cart;
            console.log(this.#cart)
            this.renderCartItems(this.#cart);
            localStorage.setItem('cartOfShopify',JSON.stringify(this.#cart));
            

            const sideCart = document.querySelector('.side-cart');
            const sideCartModal = document.querySelector('.side-cart-modal');
            sideCart.classList.toggle('open');
            sideCartModal.classList.toggle('side-cart-modal--open')
            document.body.setAttribute('style', 'overflow: hidden');
        }
        async updateCart(quantity, variantId, cartLineId){
            let cartDetails = await this.fetchAPI(this.graphqlBody(this.updateCartQuery(quantity, variantId, cartLineId)))
            this.#cart = cartDetails.data.cartLinesUpdate.cart;
            this.renderCartItems(this.#cart)
        }
        async incrementItemQuantity(quantity,variantId,cartLineId){
            await this.updateCart(quantity++,variantId,cartLineId);
        }
        async decrementItemQuantity(quantity,variantId,cartLineId){
            await this.updateCart(quantity--,variantId,cartLineId);
        }
        async createCart(){
            if(localStorage.getItem('cartOfShopify')){
                this.#cart = JSON.parse(localStorage.getItem('cartOfShopify'));
                if(this.#cart.lines){
                    this.renderCartItems(this.#cart);
                }
            }else{
                const cart = await this.fetchAPI(this.graphqlBody(this.createCartQuery()));
                 this.#cart = cart.data.cartCreate.cart;
                localStorage.setItem("cartOfShopify", JSON.stringify(this.#cart));
            }
        }
    }
    const API_ACCESS_TOKEN = 'd19c36271d7f425737e0618defdfa9ec';
    const GRAPHQL_URL = 'https://again-faster-kobiljon.myshopify.com/api/2022-07/graphql.json';

    //localStorage.removeItem('cartOfShopify')
    const plpProducts = new Plp();
    plpProducts.getAllProducts();
    window.addEventListener('DOMContentLoaded', (event) => {
        plpProducts.createCart();
    });
</script>